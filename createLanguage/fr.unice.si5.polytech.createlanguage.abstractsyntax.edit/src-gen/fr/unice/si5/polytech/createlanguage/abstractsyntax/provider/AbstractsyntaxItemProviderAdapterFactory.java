/**
 */
package fr.unice.si5.polytech.createlanguage.abstractsyntax.provider;

import fr.unice.si5.polytech.createlanguage.abstractsyntax.util.AbstractsyntaxAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AbstractsyntaxItemProviderAdapterFactory extends AbstractsyntaxAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractsyntaxItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.CreateProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateProgramItemProvider createProgramItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.CreateProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateProgramAdapter() {
		if (createProgramItemProvider == null) {
			createProgramItemProvider = new CreateProgramItemProvider(this);
		}

		return createProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.LoopChoreography} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoopChoreographyItemProvider loopChoreographyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.LoopChoreography}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoopChoreographyAdapter() {
		if (loopChoreographyItemProvider == null) {
			loopChoreographyItemProvider = new LoopChoreographyItemProvider(this);
		}

		return loopChoreographyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.FiniteChoreography} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiniteChoreographyItemProvider finiteChoreographyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.FiniteChoreography}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiniteChoreographyAdapter() {
		if (finiteChoreographyItemProvider == null) {
			finiteChoreographyItemProvider = new FiniteChoreographyItemProvider(this);
		}

		return finiteChoreographyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.GoForward} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoForwardItemProvider goForwardItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.GoForward}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoForwardAdapter() {
		if (goForwardItemProvider == null) {
			goForwardItemProvider = new GoForwardItemProvider(this);
		}

		return goForwardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Interruption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterruptionItemProvider interruptionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Interruption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterruptionAdapter() {
		if (interruptionItemProvider == null) {
			interruptionItemProvider = new InterruptionItemProvider(this);
		}

		return interruptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.ObjectFound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectFoundItemProvider objectFoundItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.ObjectFound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectFoundAdapter() {
		if (objectFoundItemProvider == null) {
			objectFoundItemProvider = new ObjectFoundItemProvider(this);
		}

		return objectFoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Instruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionItemProvider instructionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.si5.polytech.createlanguage.abstractsyntax.Instruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionAdapter() {
		if (instructionItemProvider == null) {
			instructionItemProvider = new InstructionItemProvider(this);
		}

		return instructionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (createProgramItemProvider != null)
			createProgramItemProvider.dispose();
		if (loopChoreographyItemProvider != null)
			loopChoreographyItemProvider.dispose();
		if (finiteChoreographyItemProvider != null)
			finiteChoreographyItemProvider.dispose();
		if (goForwardItemProvider != null)
			goForwardItemProvider.dispose();
		if (interruptionItemProvider != null)
			interruptionItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (objectFoundItemProvider != null)
			objectFoundItemProvider.dispose();
		if (instructionItemProvider != null)
			instructionItemProvider.dispose();
	}

}
