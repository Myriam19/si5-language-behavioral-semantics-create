// automatically generated by Xtext
grammar fr.unice.si5.polytech.CreateLanguage with org.eclipse.xtext.common.Terminals

import "http://www.example.org/createlanguage" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CreateProgram returns CreateProgram:
	'CreateProgram'
	name=EString
	'{'
		'choreographies' '{' choreographies+=Choreography ( "," choreographies+=Choreography)* '}' 
		'starting_choreo' ':' starting_choreo+=ReferenceChoreography ( "," starting_choreo+=ReferenceChoreography)*
	'}';

Choreography returns Choreography:
	LoopChoreography | FiniteChoreography;
	
ChoreoToRun returns ChoreoToRun:
	ReferenceChoreography | ParalleleChoreo;
	
Action returns Action:
	GoForward | GoBackward | Rotate | Stop | GrabInFront | ReleaseInFront | GoToClosestObject;

Condition returns Condition:
	BooleanEvent | AndCondition | OrCondition;
	
BooleanEvent returns BooleanEvent:
	ObjectFound | ObstacleFoundLeft | ObstacleFoundRight | VirtualWallFound;
	
AndCondition returns AndCondition:
	 '(' andConditions+=BooleanEvent ('&&' andConditions+=BooleanEvent)+ ')' ;
	
OrCondition returns OrCondition:
	 '(' orConditions+=BooleanEvent ('||' orConditions+=BooleanEvent)+ ')' ;

Instruction returns Instruction:
	Choreography | Action | ChoreoToRun;

EString returns ecore::EString:
	STRING | ID;

Interruption returns Interruption:
	{Interruption}
	'Interruption' '(' 'condition' '=' condition=Condition ',' 'choreography' '=' choreography=ReferenceChoreography
	;

LoopChoreography returns LoopChoreography:
	{LoopChoreography}
	'LoopChoreography'
	name=EString
	'{'
		('interruptions' '{' interruptions+=Interruption ( "," interruptions+=Interruption)* '}' )?
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
		('outCondition' ':' outCondition=Condition)?
	'}';

FiniteChoreography returns FiniteChoreography:
	{FiniteChoreography}
	'FiniteChoreography'
	name=EString
	'{'
		('interruptions' '{' interruptions+=Interruption ( "," interruptions+=Interruption)* '}' )?
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';
	
ReferenceChoreography returns ReferenceChoreography:
	{ReferenceChoreography}
	choreography=[Choreography|EString]
	
; 

ParalleleChoreo returns ParalleleChoreo:
	{ParalleleChoreo}
	'parallel' '(' referenceChoreographies+=ReferenceChoreography ',' referenceChoreographies+=ReferenceChoreography (',' referenceChoreographies+=ReferenceChoreography)* ')'
	
; 

ObjectFound returns ObjectFound:
	{ObjectFound}
	'ObjectFound' 'at' distance=Eint 'cm'
	;
	
ObstacleFoundLeft returns ObstacleFoundLeft:
	{ObstacleFoundLeft}
	'ObstacleFoundLeft'
	;
		
ObstacleFoundRight returns ObstacleFoundRight:
	{ObstacleFoundRight}
	'ObstacleFoundRight'
	;
	
VirtualWallFound returns VirtualWallFound:
	{VirtualWallFound}
	'VirtualWallFound'
	;

GoForward returns GoForward:
	{GoForward}
	'GoForward' (distance=EDouble 'cm' | duration=EDouble 's')
	;
	
GoBackward returns GoBackward:
	{GoBackward}
	'GoBackward' (distance=EDouble 'cm' | duration=EDouble 's')
	;
	
Stop returns Stop:
	{Stop}
	'Stop' duration=EDouble 's'
	;
	
Rotate returns Rotate:
	{Rotate}
	'Rotate' angle=EDouble 'degrees'
	;
	
GrabInFront returns GrabInFront:
	{GrabInFront}
	'GrabInFront'
;
	
ReleaseInFront returns ReleaseInFront:
	{ReleaseInFront}
	'ReleaseInFront'
;

GoToClosestObject returns GoToClosestObject:
	{GoToClosestObject}
	'GoToClosestObject'
;

Eint returns ecore::EInt:
	('-')?INT;
	
EDouble returns ecore::EDouble:
	('-')?INT('.'INT)?;
