// automatically generated by Xtext
grammar fr.unice.si5.polytech.CreateLanguage with org.eclipse.xtext.common.Terminals

import "http://www.example.org/abstractsyntax" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CreateProgram returns CreateProgram:
	{CreateProgram}
	'CreateProgram'
	name=EString
	'{'
		('choreographies' '{' choreographies+=Choreography ( "," choreographies+=Choreography)* '}' )?
		('starting_choreo' ':' starting_choreo=[Choreography|EString])
	'}';

Instruction returns Instruction:
	Instruction_Impl | LoopChoreography | FiniteChoreography | GoForward;


Condition returns Condition:
	Condition_Impl | ObjectFound;

Choreography returns Choreography:
	LoopChoreography | FiniteChoreography;

EString returns ecore::EString:
	STRING | ID;

Instruction_Impl returns Instruction:
	{Instruction}
	'Instruction'
	;

LoopChoreography returns LoopChoreography:
	{LoopChoreography}
	'LoopChoreography'
	name=EString
	'{'
		('interruptions' '{' interruptions+=Interruption ( "," interruptions+=Interruption)* '}' )?
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';

FiniteChoreography returns FiniteChoreography:
	{FiniteChoreography}
	'FiniteChoreography'
	name=EString
	'{'
		('interruptions' '{' interruptions+=Interruption ( "," interruptions+=Interruption)* '}' )?
		('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	'}';

GoForward returns GoForward:
	{GoForward}
	'GoForward'
	;

Interruption returns Interruption:
	{Interruption}
	'Interruption'
	'{'
		('choreography' choreography=[Choreography|EString])?
		('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
	'}';

Condition_Impl returns Condition:
	{Condition}
	'Condition'
	;

ObjectFound returns ObjectFound:
	{ObjectFound}
	'ObjectFound'
	;
